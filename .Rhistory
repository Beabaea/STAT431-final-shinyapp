return(p)
}
startplot(dat)
#### Writing the Helper Function ####
startplot <- function(dat,heatmap=FALSE){
#use PC
rownames(dat) <- dat$ID
distmatrix<-dist(dat[,-1])
dathclust<-hclust(distmatrix)
#plots typical dendrogram or heatmap
p <- ifelse(heatmap==FALSE, yes = plot(dathclust),
no = heatmap(as.matrix(distmatrix)))
#return(p)
}
startplot(dat)
plot(dathclust)
#use PC
rownames(dat) <- dat$ID
distmatrix<-dist(dat[,-1])
dathclust<-hclust(distmatrix)
plot(dathclust)
heatmap(as.matrix(distmatrix))
heatmap = FALSE
ifelse(heatmap == FALSE, yes = plot(dathclust),
no = heatmap(as.matrix(distmatrix)))
ifelse(heatmap == FALSE, plot(dathclust),
heatmap(as.matrix(distmatrix)))
#plots typical dendrogram or heatmap
p <- ifelse(heatmap == TRUE, plot(dathclust),
heatmap(as.matrix(distmatrix)))
dathclust<-hclust(distmatrix)
plot(dathclust)
p<-plot(dathclust)
#### Writing the Helper Function ####
startplot <- function(dat, heatmap = FALSE){
#use PC
rownames(dat) <- dat$ID
distmatrix<-dist(dat[,-1])
dathclust<-hclust(distmatrix)
#plots typical dendrogram or heatmap
ifelse(heatmap == FALSE, plot(dathclust),
heatmap(as.matrix(distmatrix)))
#return(p)
}
startplot(dat)
#### Writing the Helper Function ####
startplot <- function(dat, heatmap = FALSE){
#use PC
rownames(dat) <- dat$ID
distmatrix<-dist(dat[,-1])
dathclust<-hclust(distmatrix)
#plots typical dendrogram or heatmap
ifelse(heatmap == FALSE, plot(dathclust),
heatmap(as.matrix(distmatrix)))
#return(p)
}
startplot(dat)
startplot(dat)
#### Writing the Helper Function ####
startplot <- function(dat, hmap = FALSE){
#use PC
rownames(dat) <- dat$ID
distmatrix<-dist(dat[,-1])
dathclust<-hclust(distmatrix)
#plots typical dendrogram or heatmap
ifelse(hmap == FALSE, plot(dathclust),
heatmap(as.matrix(distmatrix)))
#return(p)
}
startplot(dat)
hmap <- FALSE
#plots typical dendrogram or heatmap
ifelse(hmap == FALSE, plot(dathclust),
heatmap(as.matrix(distmatrix)))
D13_MIS <- read.csv("C:/Users/Beatrice Weier/Documents/D13_MIS.csv")
possibledat<-c("D04_LSN","D04_LSR", "D04_RBT",
"D06_BCC","D06_MIS","D07_LAC",
"D12_RBK","D13_MIS")
dat <- D13_MIS
#use PC
rownames(dat) <- dat$ID
distmatrix<-dist(dat[,-1])
dathclust<-hclust(distmatrix)
hmap <- FALSE
#plots typical dendrogram or heatmap
ifelse(hmap == FALSE, plot(dathclust),
heatmap(as.matrix(distmatrix)))
if (hmap) {
heatmap(as.matrix(distmatrix))
} else {
plot(dathclust)
}
#### Writing the Helper Function ####
startplot <- function(dat, hmap = FALSE){
#use PC
rownames(dat) <- dat$ID
distmatrix<-dist(dat[,-1])
dathclust<-hclust(distmatrix)
#plots typical dendrogram or heatmap
# ifelse(hmap == FALSE, plot(dathclust),
#              heatmap(as.matrix(distmatrix)))
if (hmap) {
heatmap(as.matrix(distmatrix))
} else {
plot(dathclust)
}
#return(p)
}
startplot(dat)
startplot(dat, hmap = TRUE)
runApp('GitHub/STAT431-final-shinyapp')
runApp('GitHub/STAT431-final-shinyapp')
runApp('GitHub/STAT431-final-shinyapp')
runApp('GitHub/STAT431-final-shinyapp')
#read in dataframes
D04_LSR <- read.csv(here::here("D04_LSR.csv"))
D04_LSR$tot
D04_RBT <- read.csv(here::here("D04_RBT.csv"))
D04_RBT$tot
shiny::runApp('GitHub/STAT431-final-shinyapp')
#read in dataframes
D04_LSN <- read.csv(here::here("D04_LSN.csv"))
runApp('GitHub/STAT431-final-shinyapp')
shiny::runApp()
#setRepositories(addURLs = c(BioC = "https://bioconductor.org/packages/3.15/bioc"))
library(shiny)
library(dplyr)
library(ape)
library(BiocManager)
library(ggtree)
runApp()
#read in dataframes
D04_LSN <- read.csv(here::here("D04_LSN.csv"))
D04_LSR <- read.csv(here::here("D04_LSR.csv"))
D04_RBT <- read.csv(here::here("D04_RBT.csv"))
D06_BCC <- read.csv(here::here("D06_BCC.csv"))
D06_MIS <- read.csv(here::here("D06_MIS.csv"))
D07_LAC <- read.csv(here::here("D07_LAC.csv"))
D12_RBK <- read.csv(here::here("D12_RBK.csv"))
runApp()
#will move into sever, lets have it be reactive to
Mutations <- NULL
possibledat<- c("D04_LSN","D04_LSR", "D04_RBT",
"D06_BCC","D06_MIS","D07_LAC",
"D12_RBK","D13_MIS")
playouts <- c("rectangular", "circular", "unrooted")
#### Writing the Helper Function ####
startplot <- function(dat, hmap = FALSE, phylolayout = 'rectangular'){
#use PC
rownames(dat) <- dat$ID
distmatrix<-dist(dat %>%
select(-c(ID,tot)))
dathclust<-hclust(distmatrix)
if (hmap) {
heatmap(as.matrix(distmatrix))
} else {
#plot(dathclust)
phylodat<-as.phylo(dathclust)
ggtree(phylodat, layout = phylolayout, branch.length = 'none') +
geom_tiplab() #+
#ggplot2::xlim(0, 100)
}
}
#very small helper function to create vector of mutations in one sample
vecmutations <- function(dat){
toString(colnames((dat[,colSums(dat) > 0])))
}
ui <- fluidPage(
headerPanel("Heat Map and Dendrogram of Mutations Among Similar Regions"),
sidebarLayout(
sidebarPanel(
selectInput('site', 'Sample', possibledat),
radioButtons('ptype', 'Plot Type',
c("Phylogeny","Heatmap"),
selected = "Phylogeny"),
uiOutput('phylayout')
),
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput('plot1')),
tabPanel("Data Table",tableOutput('infotab')),
tabPanel("General Information",
HTML("This project is by Beatrice Weier. <br>
These plots take data from
<a 'https://www.nature.com/articles/s41586-020-2785-8'> this paper </a> ;
an article with data regarding mutations in melanocytes from
different subject. The R code takes this data and creates a
purely objective scaling of mutations with equal distances for
all mutations. A big disclaimer is that the distance are
calculated from the gene name, not the specific mutation within
the gene. I hope to eventually better this app and make
phylogenies accountign for biologicalvariance and probabilites
of certain mutations"))
)
)
)
ui <- fluidPage(
headerPanel("Heat Map and Dendrogram of Mutations Among Similar Regions"),
sidebarLayout(
sidebarPanel(
selectInput('site', 'Sample', possibledat),
radioButtons('ptype', 'Plot Type',
c("Phylogeny","Heatmap"),
selected = "Phylogeny"),
uiOutput('phylayout')
),
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput('plot1')),
tabPanel("Data Table",tableOutput('infotab')),
tabPanel("General Information",
HTML("This project is by Beatrice Weier. <br>
These plots take data from
<a 'https://www.nature.com/articles/s41586-020-2785-8'> this paper </a> ;
an article with data regarding mutations in melanocytes from
different subject. The R code takes this data and creates a
purely objective scaling of mutations with equal distances for
all mutations. A big disclaimer is that the distance are
calculated from the gene name, not the specific mutation within
the gene. I hope to eventually better this app and make
phylogenies accountign for biologicalvariance and probabilites
of certain mutations"))
)
)
)
runApp()
runApp()
?plotOutput
runApp()
runApp()
runApp()
runApp()
ggtree(phylodat, layout = phylolayout, branch.length = 'none') +
geom_tiplab() +
ggplot2::xlim(0, 100)
runApp()
runApp()
install.packages("ggplot2")
install.packages("ggplot2")
shiny::runApp()
runApp()
library(ggplot2)
runApp()
runApp()
runApp()
dat<-D04_LSN
#plot(dathclust)
phylodat<-as.phylo(dathclust)
?boot.phylo
boot.phylo(phylodat)
runApp()
xdat<-dat%>%select(-c(ID,tot))
boot.phylo(phylodat,xdat)
boot.phylo(phylodat,xdat,FUN=dist())
boot.phylo(phylodat,xdat,FUN=dist
)
boot<-boot.phylo(phylodat,xdat,FUN=dist)
xdat
boot<-boot.phylo(phylodat,xdat,FUN=dist,block=3)
class(xdat)
xdat<-as.matrix(xdat)
boot<-boot.phylo(phylodat,xdat,FUN=dist,block=3)
class(phylodat)
data(xdat)
xdat
data("woodmouse")
Veiw(woodmouse)
View(woodmouse)
?aboot()
install.packages("poppr")
?aboot()
?poppr::aboot()
aboot(xdat)
poppr::aboot(xdat)
runApp()
dat
subdat<-dat[1:2,]
bootstrap(subdat,100)
purrr::bootstrap(subdat,100)
View(subdat)
subdat<-dat[1:2,]%>%select(-c(ID,tot))
bootstrap(subdat,100)
install.packages(as.bio)
install.packages("as.bio")
as.bio::bootstrap(subdat,100)
install.packages("asbio")
asbio::bootstrap(subdat,100)
asbio::bootstrap(subdat, statistic = CI,R = 100)
asbio::bootstrap(subdat, statistic = mean,R = 100)
asbio::bootstrap(subdat, statistic = dist,R = 100)
bootstrap(subdat, statistic = dist, R = 100)
purrr::bootstrap(subdat, statistic = dist, R = 100)
runApp()
#function for bootstrapping
dat<-D04_LSN
subdat<-dat[1:2,]%>%select(-c(ID,tot))
install.packages("sjstats")
sjstats::bootstrap(subdat)
subdat<-dat[1:2,]%>%select(-c(ID,tot))
#setRepositories(addURLs = c(BioC = "https://bioconductor.org/packages/3.15/bioc"))
library(shiny)
library(dplyr)
library(ape)
library(BiocManager)
library(ggtree)
library(ggplot2)
setRepositories(addURLs = c(BioC = "https://bioconductor.org/packages/3.15/bioc"))
library(BiocManager)
library(ggtree)
library(ggplot2)
#function for bootstrapping
dat<-D04_LSN
subdat<-dat[1:2,]%>%select(-c(ID,tot))
#read in dataframes
D04_LSN <- read.csv(here::here("D04_LSN.csv"))
D04_LSR <- read.csv(here::here("D04_LSR.csv"))
D04_RBT <- read.csv(here::here("D04_RBT.csv"))
D06_BCC <- read.csv(here::here("D06_BCC.csv"))
D06_MIS <- read.csv(here::here("D06_MIS.csv"))
D07_LAC <- read.csv(here::here("D07_LAC.csv"))
D12_RBK <- read.csv(here::here("D12_RBK.csv"))
D13_MIS <- read.csv(here::here("D13_MIS.csv"))
#function for bootstrapping
dat<-D04_LSN
subdat<-dat[1:2,]%>%select(-c(ID,tot))
sjstats::bootstrap(subdat)
sjstats::bootstrap(subdat,n=100)
boot<-sjstats::bootstrap(subdat,n=100)
Veiw(boot)
View(boot)
View(boot)
boot$strap
#function for bootstrapping
dat<-t(D04_LSN)
subdat<-dat[1:2,]%>%select(-c(ID,tot))
boot<-sjstats::bootstrap(t(subdat),n=100)
boot$strap
purrr::map_dfr(boot$strap,dist)
purrr::map_dfr(boot$strap,~dist)
purrr::map_dfr(boot$strap,dist())
purrr::map_dfr(boot$strap,dist(.))
purrr::map_dfr(boot$strap,dist(.x))
purrr::map_dfr(boot$strap,dist())
boot$strap[1]
dist(boot$strap[1])
boot$strap[[1]]
dist(boot$strap[[1]])
as_tibble(boot$strap[[1]])
dist(as_tibble(boot$strap[[1]]))
boot<-sjstats::bootstrap(subdat,n=100)
dist(as_tibble(boot$strap[[1]]))
str(boot$strap[[1]])
purrr::map_dfr(boot$strap,dist())
purrr::map_dfr(boot$strap,dist())
purrr::map(boot$strap,dist())
dist(boot$strap)
apply(boot$strap,dist)
apply(boot$strap,FUN=dist)
lapply(boot$strap,FUN=dist)
lapply(boot$strap,FUN=dist())
sapply(boot$strap,FUN=dist)
element(boot$strap)
boot$strap
dist(boot$strap[[1]])
dist(boot$strap[1])
sapply(boot$strap,FUN=dist(as.tibble))
sapply(boot$strap,FUN=dist(as_tibble))
sapply(boot$strap,FUN=dist(as_tibble()))
sapply(boot$strap,FUN=dist(as_tibble(x)))
apply(boot$strap,FUN=as_tibble)
lapply(boot$strap,FUN=as_tibble)
tibboots<-lapply(boot$strap,FUN=as_tibble)
ui <- fluidPage(
headerPanel("Heat Map and Dendrogram of Mutations Among Similar Regions"),
sidebarLayout(
sidebarPanel(
selectInput('site', 'Sample', possibledat),
radioButtons('ptype', 'Plot Type',
c("Phylogeny","Heatmap"),
selected = "Phylogeny"),
uiOutput('phylayout')
),
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput('plot1', width = "90%")),
tabPanel("Data Table",tableOutput('infotab')),
tabPanel("General Information",
HTML("This project is by Beatrice Weier. <br>
These plots take data from
<a 'https://www.nature.com/articles/s41586-020-2785-8'> this paper </a> ;
an article with data regarding mutations in melanocytes from
different subject. The R code takes this data and creates a
purely objective scaling of mutations with equal distances for
all mutations. A big disclaimer is that the distance are
calculated from the gene name, not the specific mutation within
the gene. I hope to eventually better this app and make
phylogenies accountign for biologicalvariance and probabilites
of certain mutations"))
)
)
)
vapply(tibboots,FUN=dist)
vapply(tibboots,FUN=dist)
sapply(tibboots,FUN=dist)
preddist<-sapply(tibboots,FUN=dist)
confint(preddist)
confint(preddist)
View(x)
class(preddist)
conf(preddist)
install.packages('RCurl')
center<- mean(preddist)
num<-100
center <- mean(preddist, na.rm = TRUE)
stddev <- sd(preddist, na.rm = TRUE)
error <- qnorm(0.95)*stddev/sqrt(num)
paste(center-error,center+error)
paste(center-error, "to",center+error, sep=" ")
paste("The 95% confidence interval places
the distance between these points as"
paste("The 95% confidence interval places
the distance between these points as",
center-error, "to",
center+error, sep=" ")
paste("The 95% confidence interval places
the distance between these points as",
center-error, "to",
center+error, sep=" ")
paste("The 95% confidence interval places the distance between these points as",
center-error, "to",
center+error, sep=" ")
#function for bootstrapping
dat<-D04_LSN
uno<-D04_LSN01
dos<-D04_LSN02
#function for bootstrapping
dat<-D04_LSN
uno<-"D04_LSN01"
dos<-"D04_LSN02"
subdat<-dat %>% filter(ID %in% c(uno,dos))
View(subdat)
boot<-sjstats::bootstrap(subdat,n=num)
tibboots<-lapply(boot$strap,FUN=as_tibble)
preddist<-sapply(tibboots,FUN=dist)
preddist
center <- mean(preddist, na.rm = TRUE)
stddev <- sd(preddist, na.rm = TRUE)
error <- qnorm(0.95)*stddev/sqrt(num)
paste("The 95% confidence interval places the distance between these points as",
center-error, "to",
center+error, sep=" ")
paste("The 95% confidence interval places the distance between these points as",
round(center-error,4), "to",
center+error, sep=" ")
paste("The 95% confidence interval places the distance between these points as",
round(center-error,3), "to",
roudn(center+error,3), sep=" ")
obs<- dist(subdat)
subdat
obs<- dist(subdat)
obs<-dist(subdat,na.rm=T)
obs <- dist(subdat)
obs <- dist(as.matrix(subdat))
obs
distmatrix<-dist(dat %>%
select(-c(ID,tot)))
distmatrix
#use PC
rownames(dat) <- dat$ID
distmatrix<-dist(dat %>%
select(-c(ID,tot)))
distmatrix
?selectInput
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setRepositories(addURLs = c(BioC = "https://bioconductor.org/packages/3.15/bioc"))
BiocManager::install(version = "3.15")
setRepositories(addURLs = c(BioC = "https://bioconductor.org/packages/3.14/bioc"))
shiny::runApp()
install.packages("BiocManager")
BiocManager::install(version = "3.15")
setRepositories(addURLs = c(BioC = "https://bioconductor.org/packages/3.14/bioc"))
install.packages("shiny")
#setRepositories(addURLs = c(BioC = "https://bioconductor.org/packages/3.14/bioc"))
library(shiny)
install.packages('nloptr')
install.packages("nloptr")
setRepositories(addURLs = c(BioC = "https://bioconductor.org/packages/3.14/bioc"))
1
remotes::install_github("astamm/nloptr")
sessionInfo()
#here is the code for the app
install_version("nloptr", version = "2.0.1", repos = "http://cran.us.r-project.org")
require(devtools)
#here is the code for the app
install_version("nloptr", version = "2.0.1", repos = "http://cran.us.r-project.org")
sessionInfo()
#here is the code for the app
#install_version("nloptr", version = "2.0.1", repos = "http://cran.us.r-project.org")
setRepositories(addURLs = c(BioC = "https://bioconductor.org/packages/3.14/bioc"))
